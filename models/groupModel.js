import mongoose, { Schema } from 'mongoose';

const GroupSchema = new Schema(
  {
    // Display name for the group
    name: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      minlength: 2,
      maxlength: 100,
    },
    // URL-safe code/identifier (auto-generated from name)
    code: {
      type: String,
      required: false, // Auto-generated by pre-save hook
      unique: true,
      trim: true,
      lowercase: true,
    },
    // Description of the group
    description: {
      type: String,
      trim: true,
      maxlength: 500,
      default: '',
    },
    // Material icon name
    icon: {
      type: String,
      trim: true,
      default: 'folder',
    },
    // Default theme color for folders in this group
    defaultTheme: {
      type: String,
      trim: true,
      default: 'blue',
      enum: ['blue', 'green', 'orange', 'red', 'yellow', 'grey', 'pink', 'purple', 'cyan', 'black'],
    },
    // Default permissions required for folders in this group
    defaultPermissions: {
      type: [String],
      default: ['view_folder'],
    },
    // Parent group for hierarchy (optional)
    parentGroup: {
      type: Schema.Types.ObjectId,
      ref: 'Group',
      default: null,
    },
    // Whether this group is active
    isActive: {
      type: Boolean,
      default: true,
    },
    // Display order
    sortOrder: {
      type: Number,
      default: 0,
    },
    // Auto-generation settings
    autoGeneration: {
      enabled: {
        type: Boolean,
        default: false,
      },
      frequency: {
        type: String,
        enum: ['monthly', 'yearly', 'quarterly', 'none'],
        default: 'none',
      },
      nameTemplate: {
        type: String,
        default: '{month} {year}',
      },
    },
    // Tracking
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
    },
    updatedBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
    },
  },
  {
    timestamps: true,
  }
);

// Indexes (name and code already have indexes via unique: true)
GroupSchema.index({ isActive: 1 });
GroupSchema.index({ sortOrder: 1 });

// Virtual field: basePath (auto-generated from code)
GroupSchema.virtual('basePath').get(function() {
  return `/gosl-payroll/${this.code}`;
});

// Ensure virtuals are included in JSON and Object outputs
GroupSchema.set('toJSON', { virtuals: true });
GroupSchema.set('toObject', { virtuals: true });

// Pre-save hook to auto-generate code from name
GroupSchema.pre('save', function(next) {
  // Auto-generate code if it's not set or if name changed
  if (!this.code || this.isModified('name')) {
    // Generate URL-safe code from name
    this.code = this.name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-|-$/g, '');
  }
  
  // Ensure code is never empty
  if (!this.code) {
    return next(new Error('Failed to generate group code from name'));
  }
  
  next();
});

const Group = mongoose.model('Group', GroupSchema);

export default Group;
